package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"
)

func envOr(key, def string) string {
	v := os.Getenv(key)
	if v == "" {
		return def
	}
	return v
}

// createHS256Token manually creates a simple JWT with numeric sub claim
func postExpense(apiURL string, botKey string, telegramID int64, username string, amount float64) (int, error) {
	return postExpenseWithCategory(apiURL, botKey, telegramID, username, amount, nil)
}

func postExpenseWithCategory(apiURL string, botKey string, telegramID int64, username string, amount float64, categoryID *int) (int, error) {
	// Convert amount to cents (multiply by 100 and round)
	amountCents := int(amount * 100)
	payload := map[string]interface{}{
		"telegram_id":  telegramID,
		"username":     username,
		"amount_cents": amountCents,
		"timestamp":    time.Now().UTC().Format(time.RFC3339),
	}
	if categoryID != nil {
		payload["category_id"] = *categoryID
	}
	body, _ := json.Marshal(payload)
	req, _ := http.NewRequest("POST", apiURL+"/internal/expenses", bytes.NewReader(body))
	req.Header.Set("Content-Type", "application/json")
	if botKey != "" {
		req.Header.Set("X-BOT-KEY", botKey)
	}
	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return 0, err
	}
	defer resp.Body.Close()
	io.Copy(io.Discard, resp.Body)
	return resp.StatusCode, nil
}

func detectCategory(apiURL, description string) *int {
	if description == "" {
		return nil
	}

	payload := map[string]string{"description": description}
	body, _ := json.Marshal(payload)
	req, _ := http.NewRequest("POST", apiURL+"/categories/detect", bytes.NewReader(body))
	req.Header.Set("Content-Type", "application/json")

	client := &http.Client{Timeout: 5 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return nil
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return nil
	}

	var result map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		return nil
	}

	if id, ok := result["id"].(float64); ok && id > 0 {
		categoryID := int(id)
		return &categoryID
	}

	return nil
}

func main() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		fmt.Println("TELEGRAM_BOT_TOKEN not set")
		os.Exit(2)
	}
	apiURL := envOr("API_URL", "http://api:8080")
	botKey := os.Getenv("BOT_API_KEY")
	if botKey == "" {
		fmt.Println("warning: BOT_API_KEY not set; internal endpoint may reject requests")
	}

	// poll getUpdates
	offset := 0
	re := regexp.MustCompile(`^\s*([0-9]+(?:[.,][0-9]{1,2})?)\s*$`)

	for {
		uurl := fmt.Sprintf("https://api.telegram.org/bot%s/getUpdates?offset=%d&timeout=30", botToken, offset)
		resp, err := http.Get(uurl)
		if err != nil {
			fmt.Println("getUpdates err:", err)
			time.Sleep(3 * time.Second)
			continue
		}
		var data struct {
			Ok     bool                     `json:"ok"`
			Result []map[string]interface{} `json:"result"`
		}
		dec := json.NewDecoder(resp.Body)
		if err := dec.Decode(&data); err != nil {
			resp.Body.Close()
			fmt.Println("decode updates err:", err)
			time.Sleep(3 * time.Second)
			continue
		}
		resp.Body.Close()
		for _, item := range data.Result {
			if updateIDf, ok := item["update_id"]; ok {
				if uid, ok := updateIDf.(float64); ok {
					offset = int(uid) + 1
				}
			}
			msg, ok := item["message"].(map[string]interface{})
			if !ok {
				continue
			}

			// get user info
			var fromID int64
			username := ""
			if from, ok := msg["from"].(map[string]interface{}); ok {
				if idf, ok := from["id"].(float64); ok {
					fromID = int64(idf)
				}
				if u, ok := from["username"].(string); ok {
					username = u
				} else {
					// fallback to first_name + last_name
					fn, _ := from["first_name"].(string)
					ln, _ := from["last_name"].(string)
					if fn != "" && ln != "" {
						username = fn + " " + ln
					} else {
						username = fn + ln
					}
				}
			}

			chatID := int64(0)
			if chatf, ok := msg["chat"].(map[string]interface{}); ok {
				if cid, ok := chatf["id"].(float64); ok {
					chatID = int64(cid)
				}
			}

			// handle text messages
			text, _ := msg["text"].(string)
			if text != "" {
				handleTextMessage(botToken, apiURL, botKey, fromID, username, chatID, text, re)
			}

			// handle photo messages
			if photos, ok := msg["photo"].([]interface{}); ok && len(photos) > 0 {
				handlePhotoMessage(botToken, apiURL, botKey, fromID, username, chatID, photos)
			}
		}
	}
}

func handleTextMessage(botToken, apiURL, botKey string, fromID int64, username string, chatID int64, text string, re *regexp.Regexp) {
	// handle commands
	if strings.HasPrefix(text, "/") {
		handleCommand(botToken, apiURL, botKey, fromID, username, chatID, text)
		return
	}

	// handle shared expenses
	// Format: "split 100 –ø—Ä–æ–¥—É–∫—Ç—ã @username1 @username2"
	sharedRegex := regexp.MustCompile(`^split\s+([0-9]+(?:[.,][0-9]{1,2})?)\s+(.*)$`)
	if sharedRegex.MatchString(text) {
		handleSharedExpense(botToken, apiURL, botKey, fromID, username, chatID, text, sharedRegex)
		return
	}

	// handle expense amounts with optional category
	// Format: "100 –ø—Ä–æ–¥—É–∫—Ç—ã" or "50.50 –∫–∞—Ñ–µ"
	expenseRegex := regexp.MustCompile(`^\s*([0-9]+(?:[.,][0-9]{1,2})?)\s*(.*)$`)
	if !expenseRegex.MatchString(text) {
		sendMessage(botToken, chatID, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.50 –ø—Ä–æ–¥—É–∫—Ç—ã) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /help")
		return
	}

	m := expenseRegex.FindStringSubmatch(text)
	if len(m) < 3 {
		return
	}

	// Replace comma with dot for parsing
	numStr := m[1]
	if idx := strings.Index(numStr, ","); idx >= 0 {
		numStr = numStr[:idx] + "." + numStr[idx+1:]
	}
	amount, _ := strconv.ParseFloat(numStr, 64)
	description := strings.TrimSpace(m[2])

	// Try to detect category from description
	categoryID := detectCategory(apiURL, description)

	status, err := postExpenseWithCategory(apiURL, botKey, fromID, username, amount, categoryID)

	// send a reply via sendMessage
	var replyText string
	if err != nil {
		replyText = fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å %s: %v", m[1], err)
	} else if status >= 200 && status < 300 {
		categoryText := ""
		if categoryID != nil {
			categoryText = fmt.Sprintf(" (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: %d)", *categoryID)
		}
		replyText = fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: %s —Ä—É–±.%s", m[1], categoryText)
	} else {
		replyText = fmt.Sprintf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å %s (–æ—à–∏–±–∫–∞ %d)", m[1], status)
	}
	sendMessage(botToken, chatID, replyText)
}

func handleCommand(botToken, apiURL, botKey string, fromID int64, username string, chatID int64, command string) {
	switch command {
	case "/help":
		helpText := "ü§ñ *Expense Tracker Bot*\n\n" +
			"*üìã –ö–æ–º–∞–Ω–¥—ã:*\n" +
			"/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
			"/total - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤\n" +
			"/total week - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é\n" +
			"/total month - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü\n" +
			"/debts - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏\n\n" +
			"*üí∞ –ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Ö–æ–¥:*\n" +
			"‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Å—É–º–º–∞: 100 –∏–ª–∏ 50.50\n" +
			"‚Ä¢ –° –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π: 100 –ø—Ä–æ–¥—É–∫—Ç—ã –∏–ª–∏ 50.50 –∫–∞—Ñ–µ\n" +
			"‚Ä¢ Shared —Ä–∞—Å—Ö–æ–¥: split 300 –∫–∞—Ñ–µ @username1 @username2\n\n" +
			"*üì∏ –§–æ—Ç–æ —á–µ–∫–æ–≤:*\n" +
			"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è\n" +
			"‚Ä¢ (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" +
			"*üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n" +
			"‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç—ã (–µ–¥–∞, –º–∞–≥–∞–∑–∏–Ω, —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç)\n" +
			"‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–±–µ–Ω–∑–∏–Ω, —Ç–∞–∫—Å–∏, –º–µ—Ç—Ä–æ)\n" +
			"‚Ä¢ –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã (–∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –æ–±–µ–¥)\n" +
			"‚Ä¢ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è (–∫–∏–Ω–æ, —Ç–µ–∞—Ç—Ä, –∏–≥—Ä—ã)\n" +
			"‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ (–∞–ø—Ç–µ–∫–∞, –≤—Ä–∞—á, –ª–µ–∫–∞—Ä—Å—Ç–≤–∞)\n" +
			"‚Ä¢ –û–¥–µ–∂–¥–∞ (–æ–¥–µ–∂–¥–∞, –æ–±—É–≤—å, —à–æ–ø–∏–Ω–≥)\n" +
			"‚Ä¢ –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (—Å–≤–µ—Ç, –≤–æ–¥–∞, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç)\n" +
			"‚Ä¢ –ü—Ä–æ—á–µ–µ (–¥—Ä—É–≥–æ–µ, —Ä–∞–∑–Ω–æ–µ)\n\n" +
			"*üí° –ü—Ä–∏–º–µ—Ä—ã:*\n" +
			"‚Ä¢ 100 -> –ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: 100 —Ä—É–±.\n" +
			"‚Ä¢ 100 –ø—Ä–æ–¥—É–∫—Ç—ã -> –ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: 100 —Ä—É–±. (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ü—Ä–æ–¥—É–∫—Ç—ã)\n" +
			"‚Ä¢ split 300 –∫–∞—Ñ–µ @wife @friend -> –°–æ–∑–¥–∞–Ω shared —Ä–∞—Å—Ö–æ–¥ –Ω–∞ 3 —á–µ–ª–æ–≤–µ–∫\n" +
			"‚Ä¢ /total -> –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã\n" +
			"‚Ä¢ /debts -> –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏\n\n" +
			"–í—Å–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö! üí∏"

		sendMessage(botToken, chatID, helpText)

	case "/total":
		getTotalExpenses(botToken, apiURL, botKey, fromID, chatID, "all")

	case "/total week":
		getTotalExpenses(botToken, apiURL, botKey, fromID, chatID, "week")

	case "/total month":
		getTotalExpenses(botToken, apiURL, botKey, fromID, chatID, "month")

	case "/debts":
		getDebts(botToken, apiURL, botKey, fromID, chatID)

	default:
		sendMessage(botToken, chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
	}
}

func getTotalExpenses(botToken, apiURL, botKey string, fromID int64, chatID int64, period string) {
	// Make request to internal API
	url := apiURL + "/internal/expenses/total?telegram_id=" + strconv.FormatInt(fromID, 10)
	if period != "all" {
		url += "&period=" + period
	}

	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Set("X-BOT-KEY", botKey)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
		return
	}

	var data map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	totalRubles := data["total_rubles"].(float64)
	periodText := "–≤—Å–µ–≥–æ"
	if period == "week" {
		periodText = "–∑–∞ –Ω–µ–¥–µ–ª—é"
	} else if period == "month" {
		periodText = "–∑–∞ –º–µ—Å—è—Ü"
	}

	sendMessage(botToken, chatID, fmt.Sprintf("üìä –†–∞—Å—Ö–æ–¥—ã %s: %.2f —Ä—É–±.", periodText, totalRubles))
}

func getDebts(botToken, apiURL, botKey string, fromID int64, chatID int64) {
	// Make request to internal API
	url := apiURL + "/internal/debts?telegram_id=" + strconv.FormatInt(fromID, 10)

	req, _ := http.NewRequest("GET", url, nil)
	req.Header.Set("X-BOT-KEY", botKey)

	client := &http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
		return
	}

	var debts []map[string]interface{}
	if err := json.NewDecoder(resp.Body).Decode(&debts); err != nil {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
		return
	}

	if len(debts) == 0 {
		sendMessage(botToken, chatID, "üí∞ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤")
		return
	}

	// Format debts message
	var message strings.Builder
	message.WriteString("üí∞ *–í–∞—à–∏ –¥–æ–ª–≥–∏:*\n\n")

	owedToMe := 0
	iOwe := 0

	for _, debt := range debts {
		amountCents := int(debt["amount_cents"].(float64))
		amount := float64(amountCents) / 100.0
		username := debt["username"].(string)
		debtType := debt["type"].(string)

		if debtType == "owed_to_me" {
			owedToMe += amountCents
			message.WriteString(fmt.Sprintf("‚úÖ %s –¥–æ–ª–∂–µ–Ω –≤–∞–º %.2f —Ä—É–±.\n", username, amount))
		} else if debtType == "i_owe" {
			iOwe += amountCents
			message.WriteString(fmt.Sprintf("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã %s %.2f —Ä—É–±.\n", username, amount))
		}
	}

	message.WriteString("\nüìä *–ò—Ç–æ–≥–æ:*\n")
	message.WriteString(fmt.Sprintf("–î–æ–ª–∂–Ω—ã –≤–∞–º: %.2f —Ä—É–±.\n", float64(owedToMe)/100.0))
	message.WriteString(fmt.Sprintf("–í—ã –¥–æ–ª–∂–Ω—ã: %.2f —Ä—É–±.\n", float64(iOwe)/100.0))

	balance := owedToMe - iOwe
	if balance > 0 {
		message.WriteString(fmt.Sprintf("üíö –í–∞—à –±–∞–ª–∞–Ω—Å: +%.2f —Ä—É–±.", float64(balance)/100.0))
	} else if balance < 0 {
		message.WriteString(fmt.Sprintf("üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: %.2f —Ä—É–±.", float64(balance)/100.0))
	} else {
		message.WriteString("‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: 0 —Ä—É–±.")
	}

	sendMessage(botToken, chatID, message.String())
}

func handleSharedExpense(botToken, apiURL, botKey string, fromID int64, username string, chatID int64, text string, regex *regexp.Regexp) {
	m := regex.FindStringSubmatch(text)
	if len(m) < 3 {
		sendMessage(botToken, chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: split 100 –ø—Ä–æ–¥—É–∫—Ç—ã @username1 @username2")
		return
	}

	// Parse amount
	numStr := m[1]
	if idx := strings.Index(numStr, ","); idx >= 0 {
		numStr = numStr[:idx] + "." + numStr[idx+1:]
	}
	amount, _ := strconv.ParseFloat(numStr, 64)

	// Parse description and usernames
	description := strings.TrimSpace(m[2])

	// Extract usernames (format: @username1 @username2)
	usernameRegex := regexp.MustCompile(`@(\w+)`)
	usernames := usernameRegex.FindAllStringSubmatch(description, -1)

	// Remove usernames from description
	description = usernameRegex.ReplaceAllString(description, "")
	description = strings.TrimSpace(description)

	// Get Telegram IDs for usernames (simplified - in real implementation you'd look them up)
	var splitWith []int64
	for range usernames {
		// For now, just add placeholder IDs - in real implementation you'd look up actual Telegram IDs
		// This is a limitation of the current implementation
		splitWith = append(splitWith, 123456789) // Placeholder
	}

	if len(splitWith) == 0 {
		sendMessage(botToken, chatID, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username")
		return
	}

	// Detect category
	categoryID := detectCategory(apiURL, description)

	// Create shared expense (simplified - just create regular expense for now)
	// TODO: Implement proper shared expense creation
	status, err := postExpenseWithCategory(apiURL, botKey, fromID, username, amount, categoryID)
	if err != nil {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞")
		return
	}

	if status < 200 || status >= 300 {
		sendMessage(botToken, chatID, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞")
		return
	}

	sendMessage(botToken, chatID, fmt.Sprintf("‚úÖ –ó–∞–ø–∏—Å–∞–ª —Ä–∞—Å—Ö–æ–¥: %.2f —Ä—É–±. (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: %d)\nüí° Shared —Ä–∞—Å—Ö–æ–¥—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏",
		amount, *categoryID))
}

func handlePhotoMessage(botToken, apiURL, botKey string, fromID int64, username string, chatID int64, photos []interface{}) {
	// Get the largest photo (last in array)
	if len(photos) == 0 {
		return
	}

	photo := photos[len(photos)-1].(map[string]interface{})
	_, _ = photo["file_id"].(string) // fileID for future OCR implementation

	sendMessage(botToken, chatID, "üì∏ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ —á–µ–∫–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ OCR –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏.")

	// TODO: Implement OCR processing
	// 1. Get file path from Telegram
	// 2. Download file
	// 3. Send to OCR service
	// 4. Parse results and show inline keyboard for selection
}

func sendMessage(botToken string, chatID int64, text string) {
	smURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", botToken)
	postBody := map[string]interface{}{
		"chat_id":    chatID,
		"text":       text,
		"parse_mode": "Markdown",
	}
	pb, _ := json.Marshal(postBody)
	http.Post(smURL, "application/json", bytes.NewReader(pb))
}
