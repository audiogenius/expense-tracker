import React, { useState, useEffect } from 'react'
import { 
  fetchCategories, 
  fetchSubcategories, 
  createCategory, 
  updateCategory, 
  deleteCategory,
  createSubcategory,
  updateSubcategory,
  deleteSubcategory
} from '../../api'
import type { Category, Subcategory } from '../../types'

type CategoriesPageProps = {
  token: string
  editable?: boolean
}

export const CategoriesPage: React.FC<CategoriesPageProps> = ({ token, editable = false }) => {
  const [categories, setCategories] = useState<Category[]>([])
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null)
  const [subcategories, setSubcategories] = useState<Subcategory[]>([])
  const [loading, setLoading] = useState(true)
  const [showAddCategory, setShowAddCategory] = useState(false)
  const [showAddSubcategory, setShowAddSubcategory] = useState(false)
  const [editingCategory, setEditingCategory] = useState<Category | null>(null)
  const [editingSubcategory, setEditingSubcategory] = useState<Subcategory | null>(null)
  const [newCategoryName, setNewCategoryName] = useState('')
  const [newSubcategoryName, setNewSubcategoryName] = useState('')
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    loadCategories()
  }, [])

  useEffect(() => {
    if (selectedCategory) {
      loadSubcategories(selectedCategory.id)
    } else {
      setSubcategories([])
    }
  }, [selectedCategory])

  const loadCategories = async () => {
    try {
      setLoading(true)
      const data = await fetchCategories()
      setCategories(data)
    } catch (error) {
      console.error('Failed to load categories:', error)
    } finally {
      setLoading(false)
    }
  }

  const loadSubcategories = async (categoryId: number) => {
    try {
      const data = await fetchSubcategories(token, categoryId)
      setSubcategories(data)
    } catch (error) {
      console.error('Failed to load subcategories:', error)
    }
  }

  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return
    
    try {
      setError(null)
      await createCategory(token, newCategoryName.trim())
      setNewCategoryName('')
      setShowAddCategory(false)
      await loadCategories()
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  const handleUpdateCategory = async (category: Category) => {
    if (!newCategoryName.trim()) return
    
    try {
      setError(null)
      await updateCategory(token, category.id, newCategoryName.trim())
      setNewCategoryName('')
      setEditingCategory(null)
      await loadCategories()
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  const handleDeleteCategory = async (category: Category) => {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${category.name}"?`)) return
    
    try {
      setError(null)
      await deleteCategory(token, category.id)
      if (selectedCategory?.id === category.id) {
        setSelectedCategory(null)
      }
      await loadCategories()
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  const handleCreateSubcategory = async () => {
    if (!newSubcategoryName.trim() || !selectedCategory) return
    
    try {
      setError(null)
      await createSubcategory(token, newSubcategoryName.trim(), selectedCategory.id)
      setNewSubcategoryName('')
      setShowAddSubcategory(false)
      await loadSubcategories(selectedCategory.id)
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  const handleUpdateSubcategory = async (subcategory: Subcategory) => {
    if (!newSubcategoryName.trim()) return
    
    try {
      setError(null)
      await updateSubcategory(token, subcategory.id, newSubcategoryName.trim(), subcategory.category_id)
      setNewSubcategoryName('')
      setEditingSubcategory(null)
      if (selectedCategory) {
        await loadSubcategories(selectedCategory.id)
      }
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  const handleDeleteSubcategory = async (subcategory: Subcategory) => {
    if (!confirm(`–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é "${subcategory.name}"?`)) return
    
    try {
      setError(null)
      await deleteSubcategory(token, subcategory.id)
      if (selectedCategory) {
        await loadSubcategories(selectedCategory.id)
      }
    } catch (error: any) {
      setError(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    }
  }

  if (loading) {
    return (
      <div className="categories-page">
        <div className="loading-indicator">
          <div className="spinner"></div>
          <span>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</span>
        </div>
      </div>
    )
  }

  return (
    <div className="categories-page">
      <div className="categories-header">
        <h1>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h1>
        <p className="subtitle">
          {editable 
            ? '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏'
            : '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤'
          }
        </p>
        {error && (
          <div className="error-message">
            ‚ùå {error}
            <button onClick={() => setError(null)}>‚úï</button>
          </div>
        )}
      </div>

      <div className="categories-grid">
        {/* Categories List */}
        <div className="categories-list-container">
          <div className="list-header">
            <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({categories.length})</h2>
            {editable && (
              <button className="add-btn" onClick={() => setShowAddCategory(true)}>
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å
              </button>
            )}
          </div>
          <div className="categories-list">
            {/* Add Category Form */}
            {showAddCategory && (
              <div className="add-form">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                  value={newCategoryName}
                  onChange={(e) => setNewCategoryName(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleCreateCategory()}
                  autoFocus
                />
                <div className="form-actions">
                  <button onClick={handleCreateCategory} disabled={!newCategoryName.trim()}>
                    ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </button>
                  <button onClick={() => {
                    setShowAddCategory(false)
                    setNewCategoryName('')
                  }}>
                    ‚ùå –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            )}

            {categories.map((category) => (
              <div
                key={category.id}
                className={`category-card ${selectedCategory?.id === category.id ? 'selected' : ''}`}
                onClick={() => setSelectedCategory(category)}
              >
                {editingCategory?.id === category.id ? (
                  <div className="edit-form">
                    <input
                      type="text"
                      value={newCategoryName}
                      onChange={(e) => setNewCategoryName(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && handleUpdateCategory(category)}
                      autoFocus
                    />
                    <div className="form-actions">
                      <button onClick={() => handleUpdateCategory(category)} disabled={!newCategoryName.trim()}>
                        ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                      </button>
                      <button onClick={() => {
                        setEditingCategory(null)
                        setNewCategoryName('')
                      }}>
                        ‚ùå –û—Ç–º–µ–Ω–∞
                      </button>
                    </div>
                  </div>
                ) : (
                  <>
                    <div className="category-name">{category.name}</div>
                    <div className="category-meta">
                      ID: {category.id}
                      {editable && (
                        <div className="category-actions">
                          <button 
                            className="edit-btn-small" 
                            onClick={(e) => {
                              e.stopPropagation()
                              setEditingCategory(category)
                              setNewCategoryName(category.name)
                            }}
                            title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                          >
                            ‚úèÔ∏è
                          </button>
                          <button 
                            className="delete-btn-small" 
                            onClick={(e) => {
                              e.stopPropagation()
                              handleDeleteCategory(category)
                            }}
                            title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                          >
                            üóëÔ∏è
                          </button>
                        </div>
                      )}
                    </div>
                  </>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Subcategories List */}
        <div className="subcategories-list-container">
          <div className="list-header">
            <h2>
              {selectedCategory 
                ? `–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è "${selectedCategory.name}" (${subcategories.length})`
                : '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é'}
            </h2>
            {editable && selectedCategory && (
              <button className="add-btn" onClick={() => setShowAddSubcategory(true)}>
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å
              </button>
            )}
          </div>
          {selectedCategory ? (
            <div className="subcategories-list">
              {/* Add Subcategory Form */}
              {showAddSubcategory && (
                <div className="add-form">
                  <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
                    value={newSubcategoryName}
                    onChange={(e) => setNewSubcategoryName(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleCreateSubcategory()}
                    autoFocus
                  />
                  <div className="form-actions">
                    <button onClick={handleCreateSubcategory} disabled={!newSubcategoryName.trim()}>
                      ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button onClick={() => {
                      setShowAddSubcategory(false)
                      setNewSubcategoryName('')
                    }}>
                      ‚ùå –û—Ç–º–µ–Ω–∞
                    </button>
                  </div>
                </div>
              )}

              {subcategories.length === 0 ? (
                <div className="empty-state">
                  <p>–ù–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
                </div>
              ) : (
                subcategories.map((subcategory) => (
                  <div key={subcategory.id} className="subcategory-card">
                    {editingSubcategory?.id === subcategory.id ? (
                      <div className="edit-form">
                        <input
                          type="text"
                          value={newSubcategoryName}
                          onChange={(e) => setNewSubcategoryName(e.target.value)}
                          onKeyPress={(e) => e.key === 'Enter' && handleUpdateSubcategory(subcategory)}
                          autoFocus
                        />
                        <div className="form-actions">
                          <button onClick={() => handleUpdateSubcategory(subcategory)} disabled={!newSubcategoryName.trim()}>
                            ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                          </button>
                          <button onClick={() => {
                            setEditingSubcategory(null)
                            setNewSubcategoryName('')
                          }}>
                            ‚ùå –û—Ç–º–µ–Ω–∞
                          </button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <div className="subcategory-name">{subcategory.name}</div>
                        <div className="subcategory-meta">
                          ID: {subcategory.id}
                          {editable && (
                            <div className="subcategory-actions">
                              <button 
                                className="edit-btn-small" 
                                onClick={(e) => {
                                  e.stopPropagation()
                                  setEditingSubcategory(subcategory)
                                  setNewSubcategoryName(subcategory.name)
                                }}
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                              >
                                ‚úèÔ∏è
                              </button>
                              <button 
                                className="delete-btn-small" 
                                onClick={(e) => {
                                  e.stopPropagation()
                                  handleDeleteSubcategory(subcategory)
                                }}
                                title="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                              >
                                üóëÔ∏è
                              </button>
                            </div>
                          )}
                        </div>
                      </>
                    )}
                  </div>
                ))
              )}
            </div>
          ) : (
            <div className="empty-state">
              <p>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</p>
            </div>
          )}
        </div>
      </div>

      <div className="categories-info">
        <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
        <ul>
          <li>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤</li>
          <li>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</li>
          <li>–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é</li>
          <li>–ê–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏</li>
        </ul>
      </div>
    </div>
  )
}

