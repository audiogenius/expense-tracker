import { useState } from 'react'

type AIAssistantProps = {
  token: string
}

export const AIAssistant: React.FC<AIAssistantProps> = ({ token }) => {
  const [loading, setLoading] = useState(false)
  const [summary, setSummary] = useState<string | null>(null)
  const [error, setError] = useState<string | null>(null)

  const generateSummary = async () => {
    try {
      setLoading(true)
      setError(null)
      setSummary(null)

      const response = await fetch('/api/analytics/summary', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          period: 'day'
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`)
      }

      const data = await response.json()
      setSummary(data.summary || data.message || '–°–∞–º–º–∞—Ä–∏ –ø–æ–ª—É—á–µ–Ω')
    } catch (err) {
      console.error('Failed to generate summary:', err)
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞.')
    } finally {
      setLoading(false)
    }
  }

  const testOllama = async () => {
    try {
      setLoading(true)
      setError(null)
      setSummary(null)

      const response = await fetch('/api/analytics/health', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`)
      }

      const data = await response.json()
      
      if (data.ollama_status === 'available') {
        setSummary('‚úÖ Ollama –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\n–ú–æ–¥–µ–ª—å: ' + (data.model || 'llama2'))
      } else {
        setError('‚ùå Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω.')
      }
    } catch (err) {
      console.error('Failed to test Ollama:', err)
      setError('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Ollama. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ analytics-service –∑–∞–ø—É—â–µ–Ω.')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="ai-assistant">
      <div className="ai-header">
        <h2>ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫</h2>
        <p className="subtitle">
          –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        </p>
      </div>

      <div className="ai-actions">
        <button
          onClick={testOllama}
          disabled={loading}
          className="btn btn-test"
        >
          {loading ? '‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...' : 'üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ollama'}
        </button>
        
        <button
          onClick={generateSummary}
          disabled={loading}
          className="btn btn-generate"
        >
          {loading ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è'}
        </button>
      </div>

      {error && (
        <div className="ai-error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <div className="error-text">{error}</div>
        </div>
      )}

      {summary && (
        <div className="ai-summary">
          <div className="summary-header">
            <h3>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç</h3>
          </div>
          <div className="summary-content">
            {summary.split('\n').map((line, index) => (
              <p key={index}>{line}</p>
            ))}
          </div>
        </div>
      )}

      <div className="ai-info">
        <h3>üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</h3>
        <ul>
          <li>
            <strong>Ollama</strong> - —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π AI —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ
          </li>
          <li>
            –ù–∞–∂–º–∏—Ç–µ <strong>"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å Ollama"</strong>, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω
          </li>
          <li>
            –ù–∞–∂–º–∏—Ç–µ <strong>"–ü–æ–ª—É—á–∏—Ç—å —Å–∞–º–º–∞—Ä–∏"</strong>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
          </li>
          <li>
            AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –ø—Ä–∏—Ö–æ–¥—ã, –≤—ã—è–≤–∏—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
          </li>
        </ul>
      </div>

      <div className="ai-features">
        <h3>üîú –°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è:</h3>
        <ul>
          <li>üìä –°–∞–º–º–∞—Ä–∏ –∑–∞ –Ω–µ–¥–µ–ª—é/–º–µ—Å—è—Ü</li>
          <li>üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏</li>
          <li>üìà –ü—Ä–æ–≥–Ω–æ–∑—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏</li>
          <li>üéØ –°–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞</li>
          <li>üì± –ö–æ–º–∞–Ω–¥–∞ –≤ Telegram –±–æ—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏</li>
        </ul>
      </div>
    </div>
  )
}

