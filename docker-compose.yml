version: '3.8'

services:
  db:
    image: postgres:16
    container_name: expense_db
    env_file: .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ}
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build: ./api-service
    container_name: expense_api
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  bot:
    build: ./bot-service
    container_name: expense_bot
    env_file: .env
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped

  ocr:
    build: ./ocr-service
    container_name: expense_ocr
    env_file: .env
    volumes:
      - ./tmp:/tmp
    restart: unless-stopped

  frontend:
    build: ./frontend-service
    container_name: expense_frontend
    env_file: .env
    depends_on:
      - api
    ports:
      - "3000:80"
    restart: unless-stopped

  proxy:
    build: ./proxy-service
    container_name: expense_proxy
    env_file: .env
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - api
    restart: unless-stopped

volumes:
  db-data:
