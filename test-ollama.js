// Test script for Ollama functionality
const axios = require('axios');

async function testOllama() {
    console.log('üß† Testing Ollama integration...\n');
    
    try {
        // Test 1: Check Ollama health
        console.log('1. Checking Ollama health...');
        const healthResponse = await axios.get('http://localhost:11434/api/tags');
        console.log('‚úÖ Ollama is running');
        console.log('üìã Available models:', healthResponse.data.models?.map(m => m.name) || 'None');
        
        // Test 2: Check if our model is available
        const models = healthResponse.data.models || [];
        const ourModel = 'qwen2.5:0.5b';
        const modelExists = models.some(m => m.name === ourModel);
        
        if (modelExists) {
            console.log(`‚úÖ Model ${ourModel} is available`);
        } else {
            console.log(`‚ùå Model ${ourModel} is not available`);
            console.log('üí° You may need to pull the model: ollama pull qwen2.5:0.5b');
        }
        
        // Test 3: Test basic generation
        console.log('\n2. Testing basic text generation...');
        try {
            const generateResponse = await axios.post('http://localhost:11434/api/generate', {
                model: ourModel,
                prompt: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
                stream: false
            });
            
            console.log('‚úÖ Text generation works');
            console.log('ü§ñ Response:', generateResponse.data.response);
        } catch (error) {
            console.log('‚ùå Text generation failed:', error.message);
        }
        
        // Test 4: Test memory/context
        console.log('\n3. Testing memory and context...');
        try {
            // First message
            const msg1 = await axios.post('http://localhost:11434/api/generate', {
                model: ourModel,
                prompt: '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–µ–π. –ó–∞–ø–æ–º–Ω–∏ —ç—Ç–æ.',
                stream: false
            });
            console.log('üìù First message:', msg1.data.response);
            
            // Second message (should remember the name)
            const msg2 = await axios.post('http://localhost:11434/api/generate', {
                model: ourModel,
                prompt: '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?',
                stream: false
            });
            console.log('üß† Memory test:', msg2.data.response);
            
            if (msg2.data.response.toLowerCase().includes('–∞–ª–µ–∫—Å–µ–π')) {
                console.log('‚úÖ Ollama has memory capabilities');
            } else {
                console.log('‚ùå Ollama may not have persistent memory');
            }
            
        } catch (error) {
            console.log('‚ùå Memory test failed:', error.message);
        }
        
        // Test 5: Test financial analysis
        console.log('\n4. Testing financial analysis...');
        try {
            const financialPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

–ü–µ—Ä–∏–æ–¥: –¥–µ–Ω—å
–†–∞—Å—Ö–æ–¥—ã: 1500.00 —Ä—É–±
–î–æ—Ö–æ–¥—ã: 5000.00 —Ä—É–±
–ë–∞–ª–∞–Ω—Å: 3500.00 —Ä—É–±

–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –†–∞—Å—Ö–æ–¥—ã: 10.0% (üìà)
- –î–æ—Ö–æ–¥—ã: 5.0% (üìà)
- –ë–∞–ª–∞–Ω—Å: 15.0% (üìà)

–ê–Ω–æ–º–∞–ª–∏–∏: 0
–¢—Ä–µ–Ω–¥—ã: 1

–î–∞–π 2-3 –∫—Ä–∞—Ç–∫–∏—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.`;

            const financialResponse = await axios.post('http://localhost:11434/api/generate', {
                model: ourModel,
                prompt: financialPrompt,
                stream: false
            });
            
            console.log('‚úÖ Financial analysis works');
            console.log('üí∞ AI Response:', financialResponse.data.response);
            
        } catch (error) {
            console.log('‚ùå Financial analysis failed:', error.message);
        }
        
    } catch (error) {
        console.log('‚ùå Ollama is not running or not accessible');
        console.log('üí° Make sure Ollama is running: docker-compose up ollama');
        console.log('Error:', error.message);
    }
}

testOllama();
